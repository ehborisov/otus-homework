diff --git a/Grammar/Grammar b/Grammar/Grammar
index 05c3181..509a1b3 100644
--- a/Grammar/Grammar
+++ b/Grammar/Grammar
@@ -65,9 +65,10 @@ global_stmt: 'global' NAME (',' NAME)*
 nonlocal_stmt: 'nonlocal' NAME (',' NAME)*
 assert_stmt: 'assert' test [',' test]
 
-compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated
+compound_stmt: if_stmt | while_stmt | until_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated
 if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
 while_stmt: 'while' test ':' suite ['else' ':' suite]
+until_stmt: 'until' test ':' suite
 for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]
 try_stmt: ('try' ':' suite
            ((except_clause ':' suite)+
diff --git a/Include/Python-ast.h b/Include/Python-ast.h
index 67d677b..ea0e897 100644
--- a/Include/Python-ast.h
+++ b/Include/Python-ast.h
@@ -65,10 +65,10 @@ struct _mod {
 
 enum _stmt_kind {FunctionDef_kind=1, ClassDef_kind=2, Return_kind=3,
                   Delete_kind=4, Assign_kind=5, AugAssign_kind=6, For_kind=7,
-                  While_kind=8, If_kind=9, With_kind=10, Raise_kind=11,
-                  Try_kind=12, Assert_kind=13, Import_kind=14,
-                  ImportFrom_kind=15, Global_kind=16, Nonlocal_kind=17,
-                  Expr_kind=18, Pass_kind=19, Break_kind=20, Continue_kind=21};
+                  While_kind=8, Until_kind=9, If_kind=10, With_kind=11,
+                  Raise_kind=12, Try_kind=13, Assert_kind=14, Import_kind=15,
+                  ImportFrom_kind=16, Global_kind=17, Nonlocal_kind=18,
+                  Expr_kind=19, Pass_kind=20, Break_kind=21, Continue_kind=22};
 struct _stmt {
     enum _stmt_kind kind;
     union {
@@ -125,6 +125,11 @@ struct _stmt {
         struct {
             expr_ty test;
             asdl_seq *body;
+        } Until;
+        
+        struct {
+            expr_ty test;
+            asdl_seq *body;
             asdl_seq *orelse;
         } If;
         
@@ -428,6 +433,9 @@ stmt_ty _Py_For(expr_ty target, expr_ty iter, asdl_seq * body, asdl_seq *
 #define While(a0, a1, a2, a3, a4, a5) _Py_While(a0, a1, a2, a3, a4, a5)
 stmt_ty _Py_While(expr_ty test, asdl_seq * body, asdl_seq * orelse, int lineno,
                   int col_offset, PyArena *arena);
+#define Until(a0, a1, a2, a3, a4) _Py_Until(a0, a1, a2, a3, a4)
+stmt_ty _Py_Until(expr_ty test, asdl_seq * body, int lineno, int col_offset,
+                  PyArena *arena);
 #define If(a0, a1, a2, a3, a4, a5) _Py_If(a0, a1, a2, a3, a4, a5)
 stmt_ty _Py_If(expr_ty test, asdl_seq * body, asdl_seq * orelse, int lineno,
                int col_offset, PyArena *arena);
diff --git a/Include/graminit.h b/Include/graminit.h
index 3ec949a..6d6ab9c 100644
--- a/Include/graminit.h
+++ b/Include/graminit.h
@@ -40,45 +40,46 @@
 #define compound_stmt 293
 #define if_stmt 294
 #define while_stmt 295
-#define for_stmt 296
-#define try_stmt 297
-#define with_stmt 298
-#define with_item 299
-#define except_clause 300
-#define suite 301
-#define test 302
-#define test_nocond 303
-#define lambdef 304
-#define lambdef_nocond 305
-#define or_test 306
-#define and_test 307
-#define not_test 308
-#define comparison 309
-#define comp_op 310
-#define star_expr 311
-#define expr 312
-#define xor_expr 313
-#define and_expr 314
-#define shift_expr 315
-#define arith_expr 316
-#define term 317
-#define factor 318
-#define power 319
-#define atom 320
-#define testlist_comp 321
-#define trailer 322
-#define subscriptlist 323
-#define subscript 324
-#define sliceop 325
-#define exprlist 326
-#define testlist 327
-#define dictorsetmaker 328
-#define classdef 329
-#define arglist 330
-#define argument 331
-#define comp_iter 332
-#define comp_for 333
-#define comp_if 334
-#define encoding_decl 335
-#define yield_expr 336
-#define yield_arg 337
+#define until_stmt 296
+#define for_stmt 297
+#define try_stmt 298
+#define with_stmt 299
+#define with_item 300
+#define except_clause 301
+#define suite 302
+#define test 303
+#define test_nocond 304
+#define lambdef 305
+#define lambdef_nocond 306
+#define or_test 307
+#define and_test 308
+#define not_test 309
+#define comparison 310
+#define comp_op 311
+#define star_expr 312
+#define expr 313
+#define xor_expr 314
+#define and_expr 315
+#define shift_expr 316
+#define arith_expr 317
+#define term 318
+#define factor 319
+#define power 320
+#define atom 321
+#define testlist_comp 322
+#define trailer 323
+#define subscriptlist 324
+#define subscript 325
+#define sliceop 326
+#define exprlist 327
+#define testlist 328
+#define dictorsetmaker 329
+#define classdef 330
+#define arglist 331
+#define argument 332
+#define comp_iter 333
+#define comp_for 334
+#define comp_if 335
+#define encoding_decl 336
+#define yield_expr 337
+#define yield_arg 338
diff --git a/Parser/Python.asdl b/Parser/Python.asdl
index debd89e..e247b26 100644
--- a/Parser/Python.asdl
+++ b/Parser/Python.asdl
@@ -27,6 +27,7 @@ module Python
           -- use 'orelse' because else is a keyword in target languages
           | For(expr target, expr iter, stmt* body, stmt* orelse)
           | While(expr test, stmt* body, stmt* orelse)
+	   | Until(expr test, stmt* body)
           | If(expr test, stmt* body, stmt* orelse)
           | With(withitem* items, stmt* body)
 
diff --git a/Python/Python-ast.c b/Python/Python-ast.c
index 44fdafc..055672b 100644
--- a/Python/Python-ast.c
+++ b/Python/Python-ast.c
@@ -98,6 +98,11 @@ static char *While_fields[]={
     "body",
     "orelse",
 };
+static PyTypeObject *Until_type;
+static char *Until_fields[]={
+    "test",
+    "body",
+};
 static PyTypeObject *If_type;
 static char *If_fields[]={
     "test",
@@ -825,6 +830,8 @@ static int init_types(void)
     if (!For_type) return 0;
     While_type = make_type("While", stmt_type, While_fields, 3);
     if (!While_type) return 0;
+    Until_type = make_type("Until", stmt_type, Until_fields, 2);
+    if (!Until_type) return 0;
     If_type = make_type("If", stmt_type, If_fields, 3);
     if (!If_type) return 0;
     With_type = make_type("With", stmt_type, With_fields, 2);
@@ -1360,6 +1367,26 @@ While(expr_ty test, asdl_seq * body, asdl_seq * orelse, int lineno, int
 }
 
 stmt_ty
+Until(expr_ty test, asdl_seq * body, int lineno, int col_offset, PyArena *arena)
+{
+    stmt_ty p;
+    if (!test) {
+        PyErr_SetString(PyExc_ValueError,
+                        "field test is required for Until");
+        return NULL;
+    }
+    p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));
+    if (!p)
+        return NULL;
+    p->kind = Until_kind;
+    p->v.Until.test = test;
+    p->v.Until.body = body;
+    p->lineno = lineno;
+    p->col_offset = col_offset;
+    return p;
+}
+
+stmt_ty
 If(expr_ty test, asdl_seq * body, asdl_seq * orelse, int lineno, int
    col_offset, PyArena *arena)
 {
@@ -2552,6 +2579,20 @@ ast2obj_stmt(void* _o)
             goto failed;
         Py_DECREF(value);
         break;
+    case Until_kind:
+        result = PyType_GenericNew(Until_type, NULL, NULL);
+        if (!result) goto failed;
+        value = ast2obj_expr(o->v.Until.test);
+        if (!value) goto failed;
+        if (_PyObject_SetAttrId(result, &PyId_test, value) == -1)
+            goto failed;
+        Py_DECREF(value);
+        value = ast2obj_list(o->v.Until.body, ast2obj_stmt);
+        if (!value) goto failed;
+        if (_PyObject_SetAttrId(result, &PyId_body, value) == -1)
+            goto failed;
+        Py_DECREF(value);
+        break;
     case If_kind:
         result = PyType_GenericNew(If_type, NULL, NULL);
         if (!result) goto failed;
@@ -4309,6 +4350,53 @@ obj2ast_stmt(PyObject* obj, stmt_ty* out, PyArena* arena)
         if (*out == NULL) goto failed;
         return 0;
     }
+    isinstance = PyObject_IsInstance(obj, (PyObject*)Until_type);
+    if (isinstance == -1) {
+        return 1;
+    }
+    if (isinstance) {
+        expr_ty test;
+        asdl_seq* body;
+
+        if (_PyObject_HasAttrId(obj, &PyId_test)) {
+            int res;
+            tmp = _PyObject_GetAttrId(obj, &PyId_test);
+            if (tmp == NULL) goto failed;
+            res = obj2ast_expr(tmp, &test, arena);
+            if (res != 0) goto failed;
+            Py_CLEAR(tmp);
+        } else {
+            PyErr_SetString(PyExc_TypeError, "required field \"test\" missing from Until");
+            return 1;
+        }
+        if (_PyObject_HasAttrId(obj, &PyId_body)) {
+            int res;
+            Py_ssize_t len;
+            Py_ssize_t i;
+            tmp = _PyObject_GetAttrId(obj, &PyId_body);
+            if (tmp == NULL) goto failed;
+            if (!PyList_Check(tmp)) {
+                PyErr_Format(PyExc_TypeError, "Until field \"body\" must be a list, not a %.200s", tmp->ob_type->tp_name);
+                goto failed;
+            }
+            len = PyList_GET_SIZE(tmp);
+            body = _Py_asdl_seq_new(len, arena);
+            if (body == NULL) goto failed;
+            for (i = 0; i < len; i++) {
+                stmt_ty value;
+                res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &value, arena);
+                if (res != 0) goto failed;
+                asdl_seq_SET(body, i, value);
+            }
+            Py_CLEAR(tmp);
+        } else {
+            PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from Until");
+            return 1;
+        }
+        *out = Until(test, body, lineno, col_offset, arena);
+        if (*out == NULL) goto failed;
+        return 0;
+    }
     isinstance = PyObject_IsInstance(obj, (PyObject*)If_type);
     if (isinstance == -1) {
         return 1;
@@ -6860,6 +6948,8 @@ PyInit__ast(void)
     if (PyDict_SetItemString(d, "For", (PyObject*)For_type) < 0) return NULL;
     if (PyDict_SetItemString(d, "While", (PyObject*)While_type) < 0) return
         NULL;
+    if (PyDict_SetItemString(d, "Until", (PyObject*)Until_type) < 0) return
+        NULL;
     if (PyDict_SetItemString(d, "If", (PyObject*)If_type) < 0) return NULL;
     if (PyDict_SetItemString(d, "With", (PyObject*)With_type) < 0) return NULL;
     if (PyDict_SetItemString(d, "Raise", (PyObject*)Raise_type) < 0) return
diff --git a/Python/ast.c b/Python/ast.c
index d50cb80..69aef04 100644
--- a/Python/ast.c
+++ b/Python/ast.c
@@ -3288,6 +3288,31 @@ ast_for_while_stmt(struct compiling *c, const node *n)
 }
 
 static stmt_ty
+ast_for_until_stmt(struct compiling *c, const node *n)
+{
+    /* until_stmt: 'until' test ':' suite */
+    REQ(n, until_stmt);
+
+    if (NCH(n) == 4) {
+        expr_ty expression;
+        asdl_seq *suite_seq;
+
+        expression = ast_for_expr(c, CHILD(n, 1));
+        if (!expression)
+            return NULL;
+        suite_seq = ast_for_suite(c, CHILD(n, 3));
+        if (!suite_seq)
+            return NULL;
+        return Until(expression, suite_seq, LINENO(n), n->n_col_offset, c->c_arena);
+    }
+
+    PyErr_Format(PyExc_SystemError,
+                 "wrong number of tokens for 'until' statement: %d",
+                 NCH(n));
+    return NULL;
+}
+
+static stmt_ty
 ast_for_for_stmt(struct compiling *c, const node *n)
 {
     asdl_seq *_target, *seq = NULL, *suite_seq;
@@ -3609,6 +3634,8 @@ ast_for_stmt(struct compiling *c, const node *n)
                 return ast_for_if_stmt(c, ch);
             case while_stmt:
                 return ast_for_while_stmt(c, ch);
+            case until_stmt:
+                return ast_for_until_stmt(c, ch);
             case for_stmt:
                 return ast_for_for_stmt(c, ch);
             case try_stmt:
diff --git a/Python/compile.c b/Python/compile.c
index ff62487..cdff153 100644
--- a/Python/compile.c
+++ b/Python/compile.c
@@ -2041,6 +2041,46 @@ compiler_while(struct compiler *c, stmt_ty s)
 }
 
 static int
+compiler_until(struct compiler *c, stmt_ty s)
+{
+    basicblock *loop, *end, *anchor = NULL;
+    int constant = expr_constant(c, s->v.Until.test);
+
+    if (constant == 1) {
+        return 1;
+    }
+    loop = compiler_new_block(c);
+    end = compiler_new_block(c);
+    if (constant == -1) {
+        anchor = compiler_new_block(c);
+        if (anchor == NULL)
+            return 0;
+    }
+    if (loop == NULL || end == NULL)
+        return 0;
+
+    ADDOP_JREL(c, SETUP_LOOP, end);
+    compiler_use_next_block(c, loop);
+    if (!compiler_push_fblock(c, LOOP, loop))
+        return 0;
+    if (constant == -1) {
+        VISIT(c, expr, s->v.Until.test);
+        ADDOP_JABS(c, POP_JUMP_IF_TRUE, anchor);
+    }
+    VISIT_SEQ(c, stmt, s->v.Until.body);
+    ADDOP_JABS(c, JUMP_ABSOLUTE, loop);
+
+    if (constant == -1) {
+        compiler_use_next_block(c, anchor);
+        ADDOP(c, POP_BLOCK);
+    }
+    compiler_pop_fblock(c, LOOP, loop);
+    compiler_use_next_block(c, end);
+
+    return 1;
+}
+
+static int
 compiler_continue(struct compiler *c)
 {
     static const char LOOP_ERROR_MSG[] = "'continue' not properly in loop";
@@ -2544,6 +2584,8 @@ compiler_visit_stmt(struct compiler *c, stmt_ty s)
         return compiler_for(c, s);
     case While_kind:
         return compiler_while(c, s);
+    case Until_kind:
+        return compiler_until(c, s);
     case If_kind:
         return compiler_if(c, s);
     case Raise_kind:
diff --git a/Python/graminit.c b/Python/graminit.c
index e04999b..eacb1c8 100644
--- a/Python/graminit.c
+++ b/Python/graminit.c
@@ -799,12 +799,13 @@ static state states_36[5] = {
     {1, arcs_36_3},
     {1, arcs_36_4},
 };
-static arc arcs_37_0[8] = {
+static arc arcs_37_0[9] = {
     {87, 1},
     {88, 1},
     {89, 1},
     {90, 1},
     {91, 1},
+    {92, 1},
     {19, 1},
     {18, 1},
     {17, 1},
@@ -813,11 +814,11 @@ static arc arcs_37_1[1] = {
     {0, 1},
 };
 static state states_37[2] = {
-    {8, arcs_37_0},
+    {9, arcs_37_0},
     {1, arcs_37_1},
 };
 static arc arcs_38_0[1] = {
-    {92, 1},
+    {93, 1},
 };
 static arc arcs_38_1[1] = {
     {24, 2},
@@ -829,8 +830,8 @@ static arc arcs_38_3[1] = {
     {26, 4},
 };
 static arc arcs_38_4[3] = {
-    {93, 1},
-    {94, 5},
+    {94, 1},
+    {95, 5},
     {0, 4},
 };
 static arc arcs_38_5[1] = {
@@ -853,7 +854,7 @@ static state states_38[8] = {
     {1, arcs_38_7},
 };
 static arc arcs_39_0[1] = {
-    {95, 1},
+    {96, 1},
 };
 static arc arcs_39_1[1] = {
     {24, 2},
@@ -865,7 +866,7 @@ static arc arcs_39_3[1] = {
     {26, 4},
 };
 static arc arcs_39_4[2] = {
-    {94, 5},
+    {95, 5},
     {0, 4},
 };
 static arc arcs_39_5[1] = {
@@ -888,261 +889,260 @@ static state states_39[8] = {
     {1, arcs_39_7},
 };
 static arc arcs_40_0[1] = {
-    {96, 1},
+    {97, 1},
 };
 static arc arcs_40_1[1] = {
-    {62, 2},
+    {24, 2},
 };
 static arc arcs_40_2[1] = {
-    {97, 3},
+    {25, 3},
 };
 static arc arcs_40_3[1] = {
-    {9, 4},
+    {26, 4},
 };
 static arc arcs_40_4[1] = {
-    {25, 5},
-};
-static arc arcs_40_5[1] = {
-    {26, 6},
-};
-static arc arcs_40_6[2] = {
-    {94, 7},
-    {0, 6},
-};
-static arc arcs_40_7[1] = {
-    {25, 8},
-};
-static arc arcs_40_8[1] = {
-    {26, 9},
-};
-static arc arcs_40_9[1] = {
-    {0, 9},
+    {0, 4},
 };
-static state states_40[10] = {
+static state states_40[5] = {
     {1, arcs_40_0},
     {1, arcs_40_1},
     {1, arcs_40_2},
     {1, arcs_40_3},
     {1, arcs_40_4},
-    {1, arcs_40_5},
-    {2, arcs_40_6},
-    {1, arcs_40_7},
-    {1, arcs_40_8},
-    {1, arcs_40_9},
 };
 static arc arcs_41_0[1] = {
     {98, 1},
 };
 static arc arcs_41_1[1] = {
-    {25, 2},
+    {62, 2},
 };
 static arc arcs_41_2[1] = {
-    {26, 3},
+    {99, 3},
 };
-static arc arcs_41_3[2] = {
-    {99, 4},
-    {100, 5},
+static arc arcs_41_3[1] = {
+    {9, 4},
 };
 static arc arcs_41_4[1] = {
-    {25, 6},
+    {25, 5},
 };
 static arc arcs_41_5[1] = {
-    {25, 7},
+    {26, 6},
 };
-static arc arcs_41_6[1] = {
-    {26, 8},
+static arc arcs_41_6[2] = {
+    {95, 7},
+    {0, 6},
 };
 static arc arcs_41_7[1] = {
-    {26, 9},
+    {25, 8},
 };
-static arc arcs_41_8[4] = {
-    {99, 4},
-    {94, 10},
-    {100, 5},
-    {0, 8},
+static arc arcs_41_8[1] = {
+    {26, 9},
 };
 static arc arcs_41_9[1] = {
     {0, 9},
 };
-static arc arcs_41_10[1] = {
-    {25, 11},
-};
-static arc arcs_41_11[1] = {
-    {26, 12},
-};
-static arc arcs_41_12[2] = {
-    {100, 5},
-    {0, 12},
-};
-static state states_41[13] = {
+static state states_41[10] = {
     {1, arcs_41_0},
     {1, arcs_41_1},
     {1, arcs_41_2},
-    {2, arcs_41_3},
+    {1, arcs_41_3},
     {1, arcs_41_4},
     {1, arcs_41_5},
-    {1, arcs_41_6},
+    {2, arcs_41_6},
     {1, arcs_41_7},
-    {4, arcs_41_8},
+    {1, arcs_41_8},
     {1, arcs_41_9},
-    {1, arcs_41_10},
-    {1, arcs_41_11},
-    {2, arcs_41_12},
 };
 static arc arcs_42_0[1] = {
-    {101, 1},
+    {100, 1},
 };
 static arc arcs_42_1[1] = {
-    {102, 2},
+    {25, 2},
 };
-static arc arcs_42_2[2] = {
-    {30, 1},
-    {25, 3},
+static arc arcs_42_2[1] = {
+    {26, 3},
 };
-static arc arcs_42_3[1] = {
-    {26, 4},
+static arc arcs_42_3[2] = {
+    {101, 4},
+    {102, 5},
 };
 static arc arcs_42_4[1] = {
-    {0, 4},
+    {25, 6},
+};
+static arc arcs_42_5[1] = {
+    {25, 7},
+};
+static arc arcs_42_6[1] = {
+    {26, 8},
+};
+static arc arcs_42_7[1] = {
+    {26, 9},
+};
+static arc arcs_42_8[4] = {
+    {101, 4},
+    {95, 10},
+    {102, 5},
+    {0, 8},
+};
+static arc arcs_42_9[1] = {
+    {0, 9},
+};
+static arc arcs_42_10[1] = {
+    {25, 11},
+};
+static arc arcs_42_11[1] = {
+    {26, 12},
+};
+static arc arcs_42_12[2] = {
+    {102, 5},
+    {0, 12},
 };
-static state states_42[5] = {
+static state states_42[13] = {
     {1, arcs_42_0},
     {1, arcs_42_1},
-    {2, arcs_42_2},
-    {1, arcs_42_3},
+    {1, arcs_42_2},
+    {2, arcs_42_3},
     {1, arcs_42_4},
+    {1, arcs_42_5},
+    {1, arcs_42_6},
+    {1, arcs_42_7},
+    {4, arcs_42_8},
+    {1, arcs_42_9},
+    {1, arcs_42_10},
+    {1, arcs_42_11},
+    {2, arcs_42_12},
 };
 static arc arcs_43_0[1] = {
-    {24, 1},
+    {103, 1},
 };
-static arc arcs_43_1[2] = {
-    {82, 2},
-    {0, 1},
+static arc arcs_43_1[1] = {
+    {104, 2},
 };
-static arc arcs_43_2[1] = {
-    {103, 3},
+static arc arcs_43_2[2] = {
+    {30, 1},
+    {25, 3},
 };
 static arc arcs_43_3[1] = {
-    {0, 3},
+    {26, 4},
+};
+static arc arcs_43_4[1] = {
+    {0, 4},
 };
-static state states_43[4] = {
+static state states_43[5] = {
     {1, arcs_43_0},
-    {2, arcs_43_1},
-    {1, arcs_43_2},
+    {1, arcs_43_1},
+    {2, arcs_43_2},
     {1, arcs_43_3},
+    {1, arcs_43_4},
 };
 static arc arcs_44_0[1] = {
-    {104, 1},
+    {24, 1},
 };
 static arc arcs_44_1[2] = {
-    {24, 2},
+    {82, 2},
     {0, 1},
 };
-static arc arcs_44_2[2] = {
-    {82, 3},
-    {0, 2},
+static arc arcs_44_2[1] = {
+    {105, 3},
 };
 static arc arcs_44_3[1] = {
-    {21, 4},
-};
-static arc arcs_44_4[1] = {
-    {0, 4},
+    {0, 3},
 };
-static state states_44[5] = {
+static state states_44[4] = {
     {1, arcs_44_0},
     {2, arcs_44_1},
-    {2, arcs_44_2},
+    {1, arcs_44_2},
     {1, arcs_44_3},
-    {1, arcs_44_4},
 };
-static arc arcs_45_0[2] = {
-    {3, 1},
-    {2, 2},
+static arc arcs_45_0[1] = {
+    {106, 1},
 };
-static arc arcs_45_1[1] = {
+static arc arcs_45_1[2] = {
+    {24, 2},
     {0, 1},
 };
-static arc arcs_45_2[1] = {
-    {105, 3},
+static arc arcs_45_2[2] = {
+    {82, 3},
+    {0, 2},
 };
 static arc arcs_45_3[1] = {
-    {6, 4},
+    {21, 4},
 };
-static arc arcs_45_4[2] = {
-    {6, 4},
-    {106, 1},
+static arc arcs_45_4[1] = {
+    {0, 4},
 };
 static state states_45[5] = {
-    {2, arcs_45_0},
-    {1, arcs_45_1},
-    {1, arcs_45_2},
+    {1, arcs_45_0},
+    {2, arcs_45_1},
+    {2, arcs_45_2},
     {1, arcs_45_3},
-    {2, arcs_45_4},
+    {1, arcs_45_4},
 };
 static arc arcs_46_0[2] = {
-    {107, 1},
-    {108, 2},
+    {3, 1},
+    {2, 2},
 };
-static arc arcs_46_1[2] = {
-    {92, 3},
+static arc arcs_46_1[1] = {
     {0, 1},
 };
 static arc arcs_46_2[1] = {
-    {0, 2},
+    {107, 3},
 };
 static arc arcs_46_3[1] = {
-    {107, 4},
-};
-static arc arcs_46_4[1] = {
-    {94, 5},
+    {6, 4},
 };
-static arc arcs_46_5[1] = {
-    {24, 2},
+static arc arcs_46_4[2] = {
+    {6, 4},
+    {108, 1},
 };
-static state states_46[6] = {
+static state states_46[5] = {
     {2, arcs_46_0},
-    {2, arcs_46_1},
+    {1, arcs_46_1},
     {1, arcs_46_2},
     {1, arcs_46_3},
-    {1, arcs_46_4},
-    {1, arcs_46_5},
+    {2, arcs_46_4},
 };
 static arc arcs_47_0[2] = {
-    {107, 1},
-    {110, 1},
+    {109, 1},
+    {110, 2},
 };
-static arc arcs_47_1[1] = {
+static arc arcs_47_1[2] = {
+    {93, 3},
     {0, 1},
 };
-static state states_47[2] = {
-    {2, arcs_47_0},
-    {1, arcs_47_1},
+static arc arcs_47_2[1] = {
+    {0, 2},
 };
-static arc arcs_48_0[1] = {
-    {111, 1},
+static arc arcs_47_3[1] = {
+    {109, 4},
 };
-static arc arcs_48_1[2] = {
-    {33, 2},
-    {25, 3},
+static arc arcs_47_4[1] = {
+    {95, 5},
 };
-static arc arcs_48_2[1] = {
-    {25, 3},
+static arc arcs_47_5[1] = {
+    {24, 2},
 };
-static arc arcs_48_3[1] = {
-    {24, 4},
+static state states_47[6] = {
+    {2, arcs_47_0},
+    {2, arcs_47_1},
+    {1, arcs_47_2},
+    {1, arcs_47_3},
+    {1, arcs_47_4},
+    {1, arcs_47_5},
+};
+static arc arcs_48_0[2] = {
+    {109, 1},
+    {112, 1},
 };
-static arc arcs_48_4[1] = {
-    {0, 4},
+static arc arcs_48_1[1] = {
+    {0, 1},
 };
-static state states_48[5] = {
-    {1, arcs_48_0},
-    {2, arcs_48_1},
-    {1, arcs_48_2},
-    {1, arcs_48_3},
-    {1, arcs_48_4},
+static state states_48[2] = {
+    {2, arcs_48_0},
+    {1, arcs_48_1},
 };
 static arc arcs_49_0[1] = {
-    {111, 1},
+    {113, 1},
 };
 static arc arcs_49_1[2] = {
     {33, 2},
@@ -1152,7 +1152,7 @@ static arc arcs_49_2[1] = {
     {25, 3},
 };
 static arc arcs_49_3[1] = {
-    {109, 4},
+    {24, 4},
 };
 static arc arcs_49_4[1] = {
     {0, 4},
@@ -1165,15 +1165,27 @@ static state states_49[5] = {
     {1, arcs_49_4},
 };
 static arc arcs_50_0[1] = {
-    {112, 1},
+    {113, 1},
 };
 static arc arcs_50_1[2] = {
-    {113, 0},
-    {0, 1},
+    {33, 2},
+    {25, 3},
+};
+static arc arcs_50_2[1] = {
+    {25, 3},
+};
+static arc arcs_50_3[1] = {
+    {111, 4},
 };
-static state states_50[2] = {
+static arc arcs_50_4[1] = {
+    {0, 4},
+};
+static state states_50[5] = {
     {1, arcs_50_0},
     {2, arcs_50_1},
+    {1, arcs_50_2},
+    {1, arcs_50_3},
+    {1, arcs_50_4},
 };
 static arc arcs_51_0[1] = {
     {114, 1},
@@ -1186,84 +1198,84 @@ static state states_51[2] = {
     {1, arcs_51_0},
     {2, arcs_51_1},
 };
-static arc arcs_52_0[2] = {
+static arc arcs_52_0[1] = {
     {116, 1},
-    {117, 2},
 };
-static arc arcs_52_1[1] = {
-    {114, 2},
+static arc arcs_52_1[2] = {
+    {117, 0},
+    {0, 1},
+};
+static state states_52[2] = {
+    {1, arcs_52_0},
+    {2, arcs_52_1},
+};
+static arc arcs_53_0[2] = {
+    {118, 1},
+    {119, 2},
 };
-static arc arcs_52_2[1] = {
+static arc arcs_53_1[1] = {
+    {116, 2},
+};
+static arc arcs_53_2[1] = {
     {0, 2},
 };
-static state states_52[3] = {
-    {2, arcs_52_0},
-    {1, arcs_52_1},
-    {1, arcs_52_2},
+static state states_53[3] = {
+    {2, arcs_53_0},
+    {1, arcs_53_1},
+    {1, arcs_53_2},
 };
-static arc arcs_53_0[1] = {
-    {103, 1},
+static arc arcs_54_0[1] = {
+    {105, 1},
 };
-static arc arcs_53_1[2] = {
-    {118, 0},
+static arc arcs_54_1[2] = {
+    {120, 0},
     {0, 1},
 };
-static state states_53[2] = {
-    {1, arcs_53_0},
-    {2, arcs_53_1},
+static state states_54[2] = {
+    {1, arcs_54_0},
+    {2, arcs_54_1},
 };
-static arc arcs_54_0[10] = {
-    {119, 1},
-    {120, 1},
+static arc arcs_55_0[10] = {
     {121, 1},
     {122, 1},
     {123, 1},
     {124, 1},
     {125, 1},
-    {97, 1},
-    {116, 2},
-    {126, 3},
+    {126, 1},
+    {127, 1},
+    {99, 1},
+    {118, 2},
+    {128, 3},
 };
-static arc arcs_54_1[1] = {
+static arc arcs_55_1[1] = {
     {0, 1},
 };
-static arc arcs_54_2[1] = {
-    {97, 1},
+static arc arcs_55_2[1] = {
+    {99, 1},
 };
-static arc arcs_54_3[2] = {
-    {116, 1},
+static arc arcs_55_3[2] = {
+    {118, 1},
     {0, 3},
 };
-static state states_54[4] = {
-    {10, arcs_54_0},
-    {1, arcs_54_1},
-    {1, arcs_54_2},
-    {2, arcs_54_3},
-};
-static arc arcs_55_0[1] = {
-    {31, 1},
-};
-static arc arcs_55_1[1] = {
-    {103, 2},
-};
-static arc arcs_55_2[1] = {
-    {0, 2},
-};
-static state states_55[3] = {
-    {1, arcs_55_0},
+static state states_55[4] = {
+    {10, arcs_55_0},
     {1, arcs_55_1},
     {1, arcs_55_2},
+    {2, arcs_55_3},
 };
 static arc arcs_56_0[1] = {
-    {127, 1},
+    {31, 1},
 };
-static arc arcs_56_1[2] = {
-    {128, 0},
-    {0, 1},
+static arc arcs_56_1[1] = {
+    {105, 2},
+};
+static arc arcs_56_2[1] = {
+    {0, 2},
 };
-static state states_56[2] = {
+static state states_56[3] = {
     {1, arcs_56_0},
-    {2, arcs_56_1},
+    {1, arcs_56_1},
+    {1, arcs_56_2},
 };
 static arc arcs_57_0[1] = {
     {129, 1},
@@ -1290,21 +1302,20 @@ static state states_58[2] = {
 static arc arcs_59_0[1] = {
     {133, 1},
 };
-static arc arcs_59_1[3] = {
+static arc arcs_59_1[2] = {
     {134, 0},
-    {135, 0},
     {0, 1},
 };
 static state states_59[2] = {
     {1, arcs_59_0},
-    {3, arcs_59_1},
+    {2, arcs_59_1},
 };
 static arc arcs_60_0[1] = {
-    {136, 1},
+    {135, 1},
 };
 static arc arcs_60_1[3] = {
+    {136, 0},
     {137, 0},
-    {138, 0},
     {0, 1},
 };
 static state states_60[2] = {
@@ -1312,518 +1323,530 @@ static state states_60[2] = {
     {3, arcs_60_1},
 };
 static arc arcs_61_0[1] = {
-    {139, 1},
+    {138, 1},
 };
-static arc arcs_61_1[5] = {
-    {31, 0},
+static arc arcs_61_1[3] = {
+    {139, 0},
     {140, 0},
-    {141, 0},
-    {142, 0},
     {0, 1},
 };
 static state states_61[2] = {
     {1, arcs_61_0},
-    {5, arcs_61_1},
+    {3, arcs_61_1},
 };
-static arc arcs_62_0[4] = {
-    {137, 1},
-    {138, 1},
-    {143, 1},
-    {144, 2},
+static arc arcs_62_0[1] = {
+    {141, 1},
+};
+static arc arcs_62_1[5] = {
+    {31, 0},
+    {142, 0},
+    {143, 0},
+    {144, 0},
+    {0, 1},
+};
+static state states_62[2] = {
+    {1, arcs_62_0},
+    {5, arcs_62_1},
 };
-static arc arcs_62_1[1] = {
-    {139, 2},
+static arc arcs_63_0[4] = {
+    {139, 1},
+    {140, 1},
+    {145, 1},
+    {146, 2},
+};
+static arc arcs_63_1[1] = {
+    {141, 2},
 };
-static arc arcs_62_2[1] = {
+static arc arcs_63_2[1] = {
     {0, 2},
 };
-static state states_62[3] = {
-    {4, arcs_62_0},
-    {1, arcs_62_1},
-    {1, arcs_62_2},
+static state states_63[3] = {
+    {4, arcs_63_0},
+    {1, arcs_63_1},
+    {1, arcs_63_2},
 };
-static arc arcs_63_0[1] = {
-    {145, 1},
+static arc arcs_64_0[1] = {
+    {147, 1},
 };
-static arc arcs_63_1[3] = {
-    {146, 1},
+static arc arcs_64_1[3] = {
+    {148, 1},
     {32, 2},
     {0, 1},
 };
-static arc arcs_63_2[1] = {
-    {139, 3},
+static arc arcs_64_2[1] = {
+    {141, 3},
 };
-static arc arcs_63_3[1] = {
+static arc arcs_64_3[1] = {
     {0, 3},
 };
-static state states_63[4] = {
-    {1, arcs_63_0},
-    {3, arcs_63_1},
-    {1, arcs_63_2},
-    {1, arcs_63_3},
+static state states_64[4] = {
+    {1, arcs_64_0},
+    {3, arcs_64_1},
+    {1, arcs_64_2},
+    {1, arcs_64_3},
 };
-static arc arcs_64_0[10] = {
+static arc arcs_65_0[10] = {
     {13, 1},
-    {148, 2},
-    {150, 3},
+    {150, 2},
+    {152, 3},
     {21, 4},
-    {153, 4},
-    {154, 5},
-    {79, 4},
     {155, 4},
-    {156, 4},
+    {156, 5},
+    {79, 4},
     {157, 4},
+    {158, 4},
+    {159, 4},
 };
-static arc arcs_64_1[3] = {
+static arc arcs_65_1[3] = {
     {47, 6},
-    {147, 6},
+    {149, 6},
     {15, 4},
 };
-static arc arcs_64_2[2] = {
-    {147, 7},
-    {149, 4},
+static arc arcs_65_2[2] = {
+    {149, 7},
+    {151, 4},
 };
-static arc arcs_64_3[2] = {
-    {151, 8},
-    {152, 4},
+static arc arcs_65_3[2] = {
+    {153, 8},
+    {154, 4},
 };
-static arc arcs_64_4[1] = {
+static arc arcs_65_4[1] = {
     {0, 4},
 };
-static arc arcs_64_5[2] = {
-    {154, 5},
+static arc arcs_65_5[2] = {
+    {156, 5},
     {0, 5},
 };
-static arc arcs_64_6[1] = {
+static arc arcs_65_6[1] = {
     {15, 4},
 };
-static arc arcs_64_7[1] = {
-    {149, 4},
+static arc arcs_65_7[1] = {
+    {151, 4},
 };
-static arc arcs_64_8[1] = {
-    {152, 4},
+static arc arcs_65_8[1] = {
+    {154, 4},
 };
-static state states_64[9] = {
-    {10, arcs_64_0},
-    {3, arcs_64_1},
-    {2, arcs_64_2},
-    {2, arcs_64_3},
-    {1, arcs_64_4},
-    {2, arcs_64_5},
-    {1, arcs_64_6},
-    {1, arcs_64_7},
-    {1, arcs_64_8},
-};
-static arc arcs_65_0[2] = {
+static state states_65[9] = {
+    {10, arcs_65_0},
+    {3, arcs_65_1},
+    {2, arcs_65_2},
+    {2, arcs_65_3},
+    {1, arcs_65_4},
+    {2, arcs_65_5},
+    {1, arcs_65_6},
+    {1, arcs_65_7},
+    {1, arcs_65_8},
+};
+static arc arcs_66_0[2] = {
     {24, 1},
     {48, 1},
 };
-static arc arcs_65_1[3] = {
-    {158, 2},
+static arc arcs_66_1[3] = {
+    {160, 2},
     {30, 3},
     {0, 1},
 };
-static arc arcs_65_2[1] = {
+static arc arcs_66_2[1] = {
     {0, 2},
 };
-static arc arcs_65_3[3] = {
+static arc arcs_66_3[3] = {
     {24, 4},
     {48, 4},
     {0, 3},
 };
-static arc arcs_65_4[2] = {
+static arc arcs_66_4[2] = {
     {30, 3},
     {0, 4},
 };
-static state states_65[5] = {
-    {2, arcs_65_0},
-    {3, arcs_65_1},
-    {1, arcs_65_2},
-    {3, arcs_65_3},
-    {2, arcs_65_4},
+static state states_66[5] = {
+    {2, arcs_66_0},
+    {3, arcs_66_1},
+    {1, arcs_66_2},
+    {3, arcs_66_3},
+    {2, arcs_66_4},
 };
-static arc arcs_66_0[3] = {
+static arc arcs_67_0[3] = {
     {13, 1},
-    {148, 2},
+    {150, 2},
     {78, 3},
 };
-static arc arcs_66_1[2] = {
+static arc arcs_67_1[2] = {
     {14, 4},
     {15, 5},
 };
-static arc arcs_66_2[1] = {
-    {159, 6},
+static arc arcs_67_2[1] = {
+    {161, 6},
 };
-static arc arcs_66_3[1] = {
+static arc arcs_67_3[1] = {
     {21, 5},
 };
-static arc arcs_66_4[1] = {
+static arc arcs_67_4[1] = {
     {15, 5},
 };
-static arc arcs_66_5[1] = {
+static arc arcs_67_5[1] = {
     {0, 5},
 };
-static arc arcs_66_6[1] = {
-    {149, 5},
+static arc arcs_67_6[1] = {
+    {151, 5},
 };
-static state states_66[7] = {
-    {3, arcs_66_0},
-    {2, arcs_66_1},
-    {1, arcs_66_2},
-    {1, arcs_66_3},
-    {1, arcs_66_4},
-    {1, arcs_66_5},
-    {1, arcs_66_6},
+static state states_67[7] = {
+    {3, arcs_67_0},
+    {2, arcs_67_1},
+    {1, arcs_67_2},
+    {1, arcs_67_3},
+    {1, arcs_67_4},
+    {1, arcs_67_5},
+    {1, arcs_67_6},
 };
-static arc arcs_67_0[1] = {
-    {160, 1},
+static arc arcs_68_0[1] = {
+    {162, 1},
 };
-static arc arcs_67_1[2] = {
+static arc arcs_68_1[2] = {
     {30, 2},
     {0, 1},
 };
-static arc arcs_67_2[2] = {
-    {160, 1},
+static arc arcs_68_2[2] = {
+    {162, 1},
     {0, 2},
 };
-static state states_67[3] = {
-    {1, arcs_67_0},
-    {2, arcs_67_1},
-    {2, arcs_67_2},
+static state states_68[3] = {
+    {1, arcs_68_0},
+    {2, arcs_68_1},
+    {2, arcs_68_2},
 };
-static arc arcs_68_0[2] = {
+static arc arcs_69_0[2] = {
     {24, 1},
     {25, 2},
 };
-static arc arcs_68_1[2] = {
+static arc arcs_69_1[2] = {
     {25, 2},
     {0, 1},
 };
-static arc arcs_68_2[3] = {
+static arc arcs_69_2[3] = {
     {24, 3},
-    {161, 4},
+    {163, 4},
     {0, 2},
 };
-static arc arcs_68_3[2] = {
-    {161, 4},
+static arc arcs_69_3[2] = {
+    {163, 4},
     {0, 3},
 };
-static arc arcs_68_4[1] = {
+static arc arcs_69_4[1] = {
     {0, 4},
 };
-static state states_68[5] = {
-    {2, arcs_68_0},
-    {2, arcs_68_1},
-    {3, arcs_68_2},
-    {2, arcs_68_3},
-    {1, arcs_68_4},
+static state states_69[5] = {
+    {2, arcs_69_0},
+    {2, arcs_69_1},
+    {3, arcs_69_2},
+    {2, arcs_69_3},
+    {1, arcs_69_4},
 };
-static arc arcs_69_0[1] = {
+static arc arcs_70_0[1] = {
     {25, 1},
 };
-static arc arcs_69_1[2] = {
+static arc arcs_70_1[2] = {
     {24, 2},
     {0, 1},
 };
-static arc arcs_69_2[1] = {
+static arc arcs_70_2[1] = {
     {0, 2},
 };
-static state states_69[3] = {
-    {1, arcs_69_0},
-    {2, arcs_69_1},
-    {1, arcs_69_2},
+static state states_70[3] = {
+    {1, arcs_70_0},
+    {2, arcs_70_1},
+    {1, arcs_70_2},
 };
-static arc arcs_70_0[2] = {
-    {103, 1},
+static arc arcs_71_0[2] = {
+    {105, 1},
     {48, 1},
 };
-static arc arcs_70_1[2] = {
+static arc arcs_71_1[2] = {
     {30, 2},
     {0, 1},
 };
-static arc arcs_70_2[3] = {
-    {103, 1},
+static arc arcs_71_2[3] = {
+    {105, 1},
     {48, 1},
     {0, 2},
 };
-static state states_70[3] = {
-    {2, arcs_70_0},
-    {2, arcs_70_1},
-    {3, arcs_70_2},
+static state states_71[3] = {
+    {2, arcs_71_0},
+    {2, arcs_71_1},
+    {3, arcs_71_2},
 };
-static arc arcs_71_0[1] = {
+static arc arcs_72_0[1] = {
     {24, 1},
 };
-static arc arcs_71_1[2] = {
+static arc arcs_72_1[2] = {
     {30, 2},
     {0, 1},
 };
-static arc arcs_71_2[2] = {
+static arc arcs_72_2[2] = {
     {24, 1},
     {0, 2},
 };
-static state states_71[3] = {
-    {1, arcs_71_0},
-    {2, arcs_71_1},
-    {2, arcs_71_2},
+static state states_72[3] = {
+    {1, arcs_72_0},
+    {2, arcs_72_1},
+    {2, arcs_72_2},
 };
-static arc arcs_72_0[1] = {
+static arc arcs_73_0[1] = {
     {24, 1},
 };
-static arc arcs_72_1[4] = {
+static arc arcs_73_1[4] = {
     {25, 2},
-    {158, 3},
+    {160, 3},
     {30, 4},
     {0, 1},
 };
-static arc arcs_72_2[1] = {
+static arc arcs_73_2[1] = {
     {24, 5},
 };
-static arc arcs_72_3[1] = {
+static arc arcs_73_3[1] = {
     {0, 3},
 };
-static arc arcs_72_4[2] = {
+static arc arcs_73_4[2] = {
     {24, 6},
     {0, 4},
 };
-static arc arcs_72_5[3] = {
-    {158, 3},
+static arc arcs_73_5[3] = {
+    {160, 3},
     {30, 7},
     {0, 5},
 };
-static arc arcs_72_6[2] = {
+static arc arcs_73_6[2] = {
     {30, 4},
     {0, 6},
 };
-static arc arcs_72_7[2] = {
+static arc arcs_73_7[2] = {
     {24, 8},
     {0, 7},
 };
-static arc arcs_72_8[1] = {
+static arc arcs_73_8[1] = {
     {25, 9},
 };
-static arc arcs_72_9[1] = {
+static arc arcs_73_9[1] = {
     {24, 10},
 };
-static arc arcs_72_10[2] = {
+static arc arcs_73_10[2] = {
     {30, 7},
     {0, 10},
 };
-static state states_72[11] = {
-    {1, arcs_72_0},
-    {4, arcs_72_1},
-    {1, arcs_72_2},
-    {1, arcs_72_3},
-    {2, arcs_72_4},
-    {3, arcs_72_5},
-    {2, arcs_72_6},
-    {2, arcs_72_7},
-    {1, arcs_72_8},
-    {1, arcs_72_9},
-    {2, arcs_72_10},
-};
-static arc arcs_73_0[1] = {
-    {162, 1},
-};
-static arc arcs_73_1[1] = {
+static state states_73[11] = {
+    {1, arcs_73_0},
+    {4, arcs_73_1},
+    {1, arcs_73_2},
+    {1, arcs_73_3},
+    {2, arcs_73_4},
+    {3, arcs_73_5},
+    {2, arcs_73_6},
+    {2, arcs_73_7},
+    {1, arcs_73_8},
+    {1, arcs_73_9},
+    {2, arcs_73_10},
+};
+static arc arcs_74_0[1] = {
+    {164, 1},
+};
+static arc arcs_74_1[1] = {
     {21, 2},
 };
-static arc arcs_73_2[2] = {
+static arc arcs_74_2[2] = {
     {13, 3},
     {25, 4},
 };
-static arc arcs_73_3[2] = {
+static arc arcs_74_3[2] = {
     {14, 5},
     {15, 6},
 };
-static arc arcs_73_4[1] = {
+static arc arcs_74_4[1] = {
     {26, 7},
 };
-static arc arcs_73_5[1] = {
+static arc arcs_74_5[1] = {
     {15, 6},
 };
-static arc arcs_73_6[1] = {
+static arc arcs_74_6[1] = {
     {25, 4},
 };
-static arc arcs_73_7[1] = {
+static arc arcs_74_7[1] = {
     {0, 7},
 };
-static state states_73[8] = {
-    {1, arcs_73_0},
-    {1, arcs_73_1},
-    {2, arcs_73_2},
-    {2, arcs_73_3},
-    {1, arcs_73_4},
-    {1, arcs_73_5},
-    {1, arcs_73_6},
-    {1, arcs_73_7},
-};
-static arc arcs_74_0[3] = {
-    {163, 1},
+static state states_74[8] = {
+    {1, arcs_74_0},
+    {1, arcs_74_1},
+    {2, arcs_74_2},
+    {2, arcs_74_3},
+    {1, arcs_74_4},
+    {1, arcs_74_5},
+    {1, arcs_74_6},
+    {1, arcs_74_7},
+};
+static arc arcs_75_0[3] = {
+    {165, 1},
     {31, 2},
     {32, 3},
 };
-static arc arcs_74_1[2] = {
+static arc arcs_75_1[2] = {
     {30, 4},
     {0, 1},
 };
-static arc arcs_74_2[1] = {
+static arc arcs_75_2[1] = {
     {24, 5},
 };
-static arc arcs_74_3[1] = {
+static arc arcs_75_3[1] = {
     {24, 6},
 };
-static arc arcs_74_4[4] = {
-    {163, 1},
+static arc arcs_75_4[4] = {
+    {165, 1},
     {31, 2},
     {32, 3},
     {0, 4},
 };
-static arc arcs_74_5[2] = {
+static arc arcs_75_5[2] = {
     {30, 7},
     {0, 5},
 };
-static arc arcs_74_6[1] = {
+static arc arcs_75_6[1] = {
     {0, 6},
 };
-static arc arcs_74_7[2] = {
-    {163, 5},
+static arc arcs_75_7[2] = {
+    {165, 5},
     {32, 3},
 };
-static state states_74[8] = {
-    {3, arcs_74_0},
-    {2, arcs_74_1},
-    {1, arcs_74_2},
-    {1, arcs_74_3},
-    {4, arcs_74_4},
-    {2, arcs_74_5},
-    {1, arcs_74_6},
-    {2, arcs_74_7},
+static state states_75[8] = {
+    {3, arcs_75_0},
+    {2, arcs_75_1},
+    {1, arcs_75_2},
+    {1, arcs_75_3},
+    {4, arcs_75_4},
+    {2, arcs_75_5},
+    {1, arcs_75_6},
+    {2, arcs_75_7},
 };
-static arc arcs_75_0[1] = {
+static arc arcs_76_0[1] = {
     {24, 1},
 };
-static arc arcs_75_1[3] = {
-    {158, 2},
+static arc arcs_76_1[3] = {
+    {160, 2},
     {29, 3},
     {0, 1},
 };
-static arc arcs_75_2[1] = {
+static arc arcs_76_2[1] = {
     {0, 2},
 };
-static arc arcs_75_3[1] = {
+static arc arcs_76_3[1] = {
     {24, 2},
 };
-static state states_75[4] = {
-    {1, arcs_75_0},
-    {3, arcs_75_1},
-    {1, arcs_75_2},
-    {1, arcs_75_3},
+static state states_76[4] = {
+    {1, arcs_76_0},
+    {3, arcs_76_1},
+    {1, arcs_76_2},
+    {1, arcs_76_3},
 };
-static arc arcs_76_0[2] = {
-    {158, 1},
-    {165, 1},
+static arc arcs_77_0[2] = {
+    {160, 1},
+    {167, 1},
 };
-static arc arcs_76_1[1] = {
+static arc arcs_77_1[1] = {
     {0, 1},
 };
-static state states_76[2] = {
-    {2, arcs_76_0},
-    {1, arcs_76_1},
+static state states_77[2] = {
+    {2, arcs_77_0},
+    {1, arcs_77_1},
 };
-static arc arcs_77_0[1] = {
-    {96, 1},
+static arc arcs_78_0[1] = {
+    {98, 1},
 };
-static arc arcs_77_1[1] = {
+static arc arcs_78_1[1] = {
     {62, 2},
 };
-static arc arcs_77_2[1] = {
-    {97, 3},
+static arc arcs_78_2[1] = {
+    {99, 3},
 };
-static arc arcs_77_3[1] = {
-    {107, 4},
+static arc arcs_78_3[1] = {
+    {109, 4},
 };
-static arc arcs_77_4[2] = {
-    {164, 5},
+static arc arcs_78_4[2] = {
+    {166, 5},
     {0, 4},
 };
-static arc arcs_77_5[1] = {
+static arc arcs_78_5[1] = {
     {0, 5},
 };
-static state states_77[6] = {
-    {1, arcs_77_0},
-    {1, arcs_77_1},
-    {1, arcs_77_2},
-    {1, arcs_77_3},
-    {2, arcs_77_4},
-    {1, arcs_77_5},
+static state states_78[6] = {
+    {1, arcs_78_0},
+    {1, arcs_78_1},
+    {1, arcs_78_2},
+    {1, arcs_78_3},
+    {2, arcs_78_4},
+    {1, arcs_78_5},
 };
-static arc arcs_78_0[1] = {
-    {92, 1},
+static arc arcs_79_0[1] = {
+    {93, 1},
 };
-static arc arcs_78_1[1] = {
-    {109, 2},
+static arc arcs_79_1[1] = {
+    {111, 2},
 };
-static arc arcs_78_2[2] = {
-    {164, 3},
+static arc arcs_79_2[2] = {
+    {166, 3},
     {0, 2},
 };
-static arc arcs_78_3[1] = {
+static arc arcs_79_3[1] = {
     {0, 3},
 };
-static state states_78[4] = {
-    {1, arcs_78_0},
-    {1, arcs_78_1},
-    {2, arcs_78_2},
-    {1, arcs_78_3},
+static state states_79[4] = {
+    {1, arcs_79_0},
+    {1, arcs_79_1},
+    {2, arcs_79_2},
+    {1, arcs_79_3},
 };
-static arc arcs_79_0[1] = {
+static arc arcs_80_0[1] = {
     {21, 1},
 };
-static arc arcs_79_1[1] = {
+static arc arcs_80_1[1] = {
     {0, 1},
 };
-static state states_79[2] = {
-    {1, arcs_79_0},
-    {1, arcs_79_1},
+static state states_80[2] = {
+    {1, arcs_80_0},
+    {1, arcs_80_1},
 };
-static arc arcs_80_0[1] = {
-    {167, 1},
+static arc arcs_81_0[1] = {
+    {169, 1},
 };
-static arc arcs_80_1[2] = {
-    {168, 2},
+static arc arcs_81_1[2] = {
+    {170, 2},
     {0, 1},
 };
-static arc arcs_80_2[1] = {
+static arc arcs_81_2[1] = {
     {0, 2},
 };
-static state states_80[3] = {
-    {1, arcs_80_0},
-    {2, arcs_80_1},
-    {1, arcs_80_2},
+static state states_81[3] = {
+    {1, arcs_81_0},
+    {2, arcs_81_1},
+    {1, arcs_81_2},
 };
-static arc arcs_81_0[2] = {
+static arc arcs_82_0[2] = {
     {73, 1},
     {9, 2},
 };
-static arc arcs_81_1[1] = {
+static arc arcs_82_1[1] = {
     {24, 2},
 };
-static arc arcs_81_2[1] = {
+static arc arcs_82_2[1] = {
     {0, 2},
 };
-static state states_81[3] = {
-    {2, arcs_81_0},
-    {1, arcs_81_1},
-    {1, arcs_81_2},
+static state states_82[3] = {
+    {2, arcs_82_0},
+    {1, arcs_82_1},
+    {1, arcs_82_2},
 };
-static dfa dfas[82] = {
+static dfa dfas[83] = {
     {256, "single_input", 0, 3, states_0,
-     "\004\050\060\200\000\000\000\240\340\223\160\220\045\200\020\000\000\206\120\076\204\000"},
+     "\004\050\060\200\000\000\000\240\340\223\160\040\227\000\102\000\000\030\102\371\020\002"},
     {257, "file_input", 0, 2, states_1,
-     "\204\050\060\200\000\000\000\240\340\223\160\220\045\200\020\000\000\206\120\076\204\000"},
+     "\204\050\060\200\000\000\000\240\340\223\160\040\227\000\102\000\000\030\102\371\020\002"},
     {258, "eval_input", 0, 3, states_2,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\200\020\000\000\206\120\076\000\000"},
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\102\000\000\030\102\371\000\000"},
     {259, "decorator", 0, 7, states_3,
      "\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
     {260, "decorators", 0, 2, states_4,
@@ -1843,15 +1866,15 @@ static dfa dfas[82] = {
     {267, "vfpdef", 0, 2, states_11,
      "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
     {268, "stmt", 0, 2, states_12,
-     "\000\050\060\200\000\000\000\240\340\223\160\220\045\200\020\000\000\206\120\076\204\000"},
+     "\000\050\060\200\000\000\000\240\340\223\160\040\227\000\102\000\000\030\102\371\020\002"},
     {269, "simple_stmt", 0, 4, states_13,
-     "\000\040\040\200\000\000\000\240\340\223\160\000\000\200\020\000\000\206\120\076\200\000"},
+     "\000\040\040\200\000\000\000\240\340\223\160\000\000\000\102\000\000\030\102\371\000\002"},
     {270, "small_stmt", 0, 2, states_14,
-     "\000\040\040\200\000\000\000\240\340\223\160\000\000\200\020\000\000\206\120\076\200\000"},
+     "\000\040\040\200\000\000\000\240\340\223\160\000\000\000\102\000\000\030\102\371\000\002"},
     {271, "expr_stmt", 0, 6, states_15,
-     "\000\040\040\200\000\000\000\000\000\200\000\000\000\200\020\000\000\206\120\076\000\000"},
+     "\000\040\040\200\000\000\000\000\000\200\000\000\000\000\102\000\000\030\102\371\000\000"},
     {272, "testlist_star_expr", 0, 3, states_16,
-     "\000\040\040\200\000\000\000\000\000\200\000\000\000\200\020\000\000\206\120\076\000\000"},
+     "\000\040\040\200\000\000\000\000\000\200\000\000\000\000\102\000\000\030\102\371\000\000"},
     {273, "augassign", 0, 2, states_17,
      "\000\000\000\000\000\000\376\037\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
     {274, "del_stmt", 0, 3, states_18,
@@ -1859,7 +1882,7 @@ static dfa dfas[82] = {
     {275, "pass_stmt", 0, 2, states_19,
      "\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
     {276, "flow_stmt", 0, 2, states_20,
-     "\000\000\000\000\000\000\000\000\340\001\000\000\000\000\000\000\000\000\000\000\200\000"},
+     "\000\000\000\000\000\000\000\000\340\001\000\000\000\000\000\000\000\000\000\000\000\002"},
     {277, "break_stmt", 0, 2, states_21,
      "\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000"},
     {278, "continue_stmt", 0, 2, states_22,
@@ -1867,7 +1890,7 @@ static dfa dfas[82] = {
     {279, "return_stmt", 0, 3, states_23,
      "\000\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000"},
     {280, "yield_stmt", 0, 2, states_24,
-     "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200\000"},
+     "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002"},
     {281, "raise_stmt", 0, 5, states_25,
      "\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000"},
     {282, "import_stmt", 0, 2, states_26,
@@ -1893,97 +1916,99 @@ static dfa dfas[82] = {
     {292, "assert_stmt", 0, 5, states_36,
      "\000\000\000\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\000\000\000"},
     {293, "compound_stmt", 0, 2, states_37,
-     "\000\010\020\000\000\000\000\000\000\000\000\220\045\000\000\000\000\000\000\000\004\000"},
+     "\000\010\020\000\000\000\000\000\000\000\000\040\227\000\000\000\000\000\000\000\020\000"},
     {294, "if_stmt", 0, 8, states_38,
-     "\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000"},
+     "\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\000"},
     {295, "while_stmt", 0, 8, states_39,
-     "\000\000\000\000\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000"},
-    {296, "for_stmt", 0, 10, states_40,
      "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000"},
-    {297, "try_stmt", 0, 13, states_41,
+    {296, "until_stmt", 0, 5, states_40,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000"},
+    {297, "for_stmt", 0, 10, states_41,
      "\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000"},
-    {298, "with_stmt", 0, 5, states_42,
-     "\000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000"},
-    {299, "with_item", 0, 4, states_43,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\200\020\000\000\206\120\076\000\000"},
-    {300, "except_clause", 0, 5, states_44,
-     "\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000"},
-    {301, "suite", 0, 5, states_45,
-     "\004\040\040\200\000\000\000\240\340\223\160\000\000\200\020\000\000\206\120\076\200\000"},
-    {302, "test", 0, 6, states_46,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\200\020\000\000\206\120\076\000\000"},
-    {303, "test_nocond", 0, 2, states_47,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\200\020\000\000\206\120\076\000\000"},
-    {304, "lambdef", 0, 5, states_48,
-     "\000\000\000\000\000\000\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000"},
-    {305, "lambdef_nocond", 0, 5, states_49,
-     "\000\000\000\000\000\000\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000"},
-    {306, "or_test", 0, 2, states_50,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\020\000\000\206\120\076\000\000"},
-    {307, "and_test", 0, 2, states_51,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\020\000\000\206\120\076\000\000"},
-    {308, "not_test", 0, 3, states_52,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\020\000\000\206\120\076\000\000"},
-    {309, "comparison", 0, 2, states_53,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\206\120\076\000\000"},
-    {310, "comp_op", 0, 4, states_54,
-     "\000\000\000\000\000\000\000\000\000\000\000\000\002\000\220\177\000\000\000\000\000\000"},
-    {311, "star_expr", 0, 3, states_55,
+    {298, "try_stmt", 0, 13, states_42,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000"},
+    {299, "with_stmt", 0, 5, states_43,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000\000"},
+    {300, "with_item", 0, 4, states_44,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\102\000\000\030\102\371\000\000"},
+    {301, "except_clause", 0, 5, states_45,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000"},
+    {302, "suite", 0, 5, states_46,
+     "\004\040\040\200\000\000\000\240\340\223\160\000\000\000\102\000\000\030\102\371\000\002"},
+    {303, "test", 0, 6, states_47,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\102\000\000\030\102\371\000\000"},
+    {304, "test_nocond", 0, 2, states_48,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\102\000\000\030\102\371\000\000"},
+    {305, "lambdef", 0, 5, states_49,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000"},
+    {306, "lambdef_nocond", 0, 5, states_50,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000"},
+    {307, "or_test", 0, 2, states_51,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\100\000\000\030\102\371\000\000"},
+    {308, "and_test", 0, 2, states_52,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\100\000\000\030\102\371\000\000"},
+    {309, "not_test", 0, 3, states_53,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\100\000\000\030\102\371\000\000"},
+    {310, "comparison", 0, 2, states_54,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\030\102\371\000\000"},
+    {311, "comp_op", 0, 4, states_55,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\010\000\100\376\001\000\000\000\000\000"},
+    {312, "star_expr", 0, 3, states_56,
      "\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {312, "expr", 0, 2, states_56,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\206\120\076\000\000"},
-    {313, "xor_expr", 0, 2, states_57,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\206\120\076\000\000"},
-    {314, "and_expr", 0, 2, states_58,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\206\120\076\000\000"},
-    {315, "shift_expr", 0, 2, states_59,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\206\120\076\000\000"},
-    {316, "arith_expr", 0, 2, states_60,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\206\120\076\000\000"},
-    {317, "term", 0, 2, states_61,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\206\120\076\000\000"},
-    {318, "factor", 0, 3, states_62,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\206\120\076\000\000"},
-    {319, "power", 0, 4, states_63,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000\120\076\000\000"},
-    {320, "atom", 0, 9, states_64,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000\120\076\000\000"},
-    {321, "testlist_comp", 0, 5, states_65,
-     "\000\040\040\200\000\000\000\000\000\200\000\000\000\200\020\000\000\206\120\076\000\000"},
-    {322, "trailer", 0, 7, states_66,
-     "\000\040\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\020\000\000\000"},
-    {323, "subscriptlist", 0, 3, states_67,
-     "\000\040\040\002\000\000\000\000\000\200\000\000\000\200\020\000\000\206\120\076\000\000"},
-    {324, "subscript", 0, 5, states_68,
-     "\000\040\040\002\000\000\000\000\000\200\000\000\000\200\020\000\000\206\120\076\000\000"},
-    {325, "sliceop", 0, 3, states_69,
+    {313, "expr", 0, 2, states_57,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\030\102\371\000\000"},
+    {314, "xor_expr", 0, 2, states_58,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\030\102\371\000\000"},
+    {315, "and_expr", 0, 2, states_59,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\030\102\371\000\000"},
+    {316, "shift_expr", 0, 2, states_60,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\030\102\371\000\000"},
+    {317, "arith_expr", 0, 2, states_61,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\030\102\371\000\000"},
+    {318, "term", 0, 2, states_62,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\030\102\371\000\000"},
+    {319, "factor", 0, 3, states_63,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\030\102\371\000\000"},
+    {320, "power", 0, 4, states_64,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000\100\371\000\000"},
+    {321, "atom", 0, 9, states_65,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000\100\371\000\000"},
+    {322, "testlist_comp", 0, 5, states_66,
+     "\000\040\040\200\000\000\000\000\000\200\000\000\000\000\102\000\000\030\102\371\000\000"},
+    {323, "trailer", 0, 7, states_67,
+     "\000\040\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\100\000\000\000"},
+    {324, "subscriptlist", 0, 3, states_68,
+     "\000\040\040\002\000\000\000\000\000\200\000\000\000\000\102\000\000\030\102\371\000\000"},
+    {325, "subscript", 0, 5, states_69,
+     "\000\040\040\002\000\000\000\000\000\200\000\000\000\000\102\000\000\030\102\371\000\000"},
+    {326, "sliceop", 0, 3, states_70,
      "\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {326, "exprlist", 0, 3, states_70,
-     "\000\040\040\200\000\000\000\000\000\200\000\000\000\000\000\000\000\206\120\076\000\000"},
-    {327, "testlist", 0, 3, states_71,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\200\020\000\000\206\120\076\000\000"},
-    {328, "dictorsetmaker", 0, 11, states_72,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\200\020\000\000\206\120\076\000\000"},
-    {329, "classdef", 0, 8, states_73,
-     "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000"},
-    {330, "arglist", 0, 8, states_74,
-     "\000\040\040\200\001\000\000\000\000\200\000\000\000\200\020\000\000\206\120\076\000\000"},
-    {331, "argument", 0, 4, states_75,
-     "\000\040\040\000\000\000\000\000\000\200\000\000\000\200\020\000\000\206\120\076\000\000"},
-    {332, "comp_iter", 0, 2, states_76,
-     "\000\000\000\000\000\000\000\000\000\000\000\020\001\000\000\000\000\000\000\000\000\000"},
-    {333, "comp_for", 0, 6, states_77,
-     "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000"},
-    {334, "comp_if", 0, 4, states_78,
-     "\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000"},
-    {335, "encoding_decl", 0, 2, states_79,
+    {327, "exprlist", 0, 3, states_71,
+     "\000\040\040\200\000\000\000\000\000\200\000\000\000\000\000\000\000\030\102\371\000\000"},
+    {328, "testlist", 0, 3, states_72,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\102\000\000\030\102\371\000\000"},
+    {329, "dictorsetmaker", 0, 11, states_73,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\102\000\000\030\102\371\000\000"},
+    {330, "classdef", 0, 8, states_74,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000"},
+    {331, "arglist", 0, 8, states_75,
+     "\000\040\040\200\001\000\000\000\000\200\000\000\000\000\102\000\000\030\102\371\000\000"},
+    {332, "argument", 0, 4, states_76,
+     "\000\040\040\000\000\000\000\000\000\200\000\000\000\000\102\000\000\030\102\371\000\000"},
+    {333, "comp_iter", 0, 2, states_77,
+     "\000\000\000\000\000\000\000\000\000\000\000\040\004\000\000\000\000\000\000\000\000\000"},
+    {334, "comp_for", 0, 6, states_78,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000"},
+    {335, "comp_if", 0, 4, states_79,
+     "\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\000"},
+    {336, "encoding_decl", 0, 2, states_80,
      "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {336, "yield_expr", 0, 3, states_80,
-     "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200\000"},
-    {337, "yield_arg", 0, 3, states_81,
-     "\000\040\040\000\000\000\000\000\000\202\000\000\000\200\020\000\000\206\120\076\000\000"},
+    {337, "yield_expr", 0, 3, states_81,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002"},
+    {338, "yield_arg", 0, 3, states_82,
+     "\000\040\040\000\000\000\000\000\000\202\000\000\000\000\102\000\000\030\102\371\000\000"},
 };
-static label labels[169] = {
+static label labels[171] = {
     {0, "EMPTY"},
     {256, 0},
     {4, 0},
@@ -1993,24 +2018,24 @@ static label labels[169] = {
     {268, 0},
     {0, 0},
     {258, 0},
-    {327, 0},
+    {328, 0},
     {259, 0},
     {49, 0},
     {289, 0},
     {7, 0},
-    {330, 0},
+    {331, 0},
     {8, 0},
     {260, 0},
     {261, 0},
-    {329, 0},
+    {330, 0},
     {262, 0},
     {1, "def"},
     {1, 0},
     {263, 0},
     {50, 0},
-    {302, 0},
+    {303, 0},
     {11, 0},
-    {301, 0},
+    {302, 0},
     {264, 0},
     {265, 0},
     {22, 0},
@@ -2031,8 +2056,8 @@ static label labels[169] = {
     {292, 0},
     {272, 0},
     {273, 0},
-    {336, 0},
-    {311, 0},
+    {337, 0},
+    {312, 0},
     {36, 0},
     {37, 0},
     {38, 0},
@@ -2046,7 +2071,7 @@ static label labels[169] = {
     {46, 0},
     {48, 0},
     {1, "del"},
-    {326, 0},
+    {327, 0},
     {1, "pass"},
     {277, 0},
     {278, 0},
@@ -2076,33 +2101,35 @@ static label labels[169] = {
     {296, 0},
     {297, 0},
     {298, 0},
+    {299, 0},
     {1, "if"},
     {1, "elif"},
     {1, "else"},
     {1, "while"},
+    {1, "until"},
     {1, "for"},
     {1, "in"},
     {1, "try"},
-    {300, 0},
+    {301, 0},
     {1, "finally"},
     {1, "with"},
-    {299, 0},
-    {312, 0},
+    {300, 0},
+    {313, 0},
     {1, "except"},
     {5, 0},
     {6, 0},
-    {306, 0},
-    {304, 0},
-    {303, 0},
+    {307, 0},
     {305, 0},
+    {304, 0},
+    {306, 0},
     {1, "lambda"},
-    {307, 0},
-    {1, "or"},
     {308, 0},
+    {1, "or"},
+    {309, 0},
     {1, "and"},
     {1, "not"},
-    {309, 0},
     {310, 0},
+    {311, 0},
     {20, 0},
     {21, 0},
     {27, 0},
@@ -2111,52 +2138,52 @@ static label labels[169] = {
     {28, 0},
     {28, 0},
     {1, "is"},
-    {313, 0},
-    {18, 0},
     {314, 0},
-    {32, 0},
+    {18, 0},
     {315, 0},
-    {19, 0},
+    {32, 0},
     {316, 0},
+    {19, 0},
+    {317, 0},
     {33, 0},
     {34, 0},
-    {317, 0},
+    {318, 0},
     {14, 0},
     {15, 0},
-    {318, 0},
+    {319, 0},
     {17, 0},
     {24, 0},
     {47, 0},
     {31, 0},
-    {319, 0},
     {320, 0},
-    {322, 0},
     {321, 0},
+    {323, 0},
+    {322, 0},
     {9, 0},
     {10, 0},
     {25, 0},
-    {328, 0},
+    {329, 0},
     {26, 0},
     {2, 0},
     {3, 0},
     {1, "None"},
     {1, "True"},
     {1, "False"},
-    {333, 0},
-    {323, 0},
+    {334, 0},
     {324, 0},
     {325, 0},
+    {326, 0},
     {1, "class"},
-    {331, 0},
     {332, 0},
-    {334, 0},
+    {333, 0},
     {335, 0},
+    {336, 0},
     {1, "yield"},
-    {337, 0},
+    {338, 0},
 };
 grammar _PyParser_Grammar = {
-    82,
+    83,
     dfas,
-    {169, labels},
+    {171, labels},
     256
 };
diff --git a/Python/symtable.c b/Python/symtable.c
index 9512673..bfacfe6 100644
--- a/Python/symtable.c
+++ b/Python/symtable.c
@@ -1217,6 +1217,10 @@ symtable_visit_stmt(struct symtable *st, stmt_ty s)
         if (s->v.While.orelse)
             VISIT_SEQ(st, stmt, s->v.While.orelse);
         break;
+    case Until_kind:
+    	VISIT(st, expr, s->v.Until.test);
+    	VISIT_SEQ(st, stmt, s->v.Until.body);
+    	break;
     case If_kind:
         /* XXX if 0: and lookup_yield() hacks */
         VISIT(st, expr, s->v.If.test);
